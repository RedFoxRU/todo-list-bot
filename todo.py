import os
import sqlite3

import requests
import telebot
from googletrans import Translator
from telebot import apihelper, types

LINE = "=" * 22

translator = Translator()

token = os.environ.get("BOT_TOKEN")
SELECT = "SELECT {cl} FROM {tb} WHERE {wCL}={wVL};"
INSERT = "INSERT INTO {tb} ({cls}) VALUES ({vls})"
UPDATE = "UPDATE {tb} SET {st}=? WHERE {wCL}={wVL}"


conn = sqlite3.connect("todo.db")

cursor = conn.cursor()

cursor.execute(
    """
        CREATE TABLE IF NOT EXISTS `Users` (
            `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            `telegram-id` intenger NOT NULL,
            `name` varchar(255) NOT NULL,
            `thisPrjct` varchar(255) ,
            `todo-lists` text
        );
"""
)

cursor.execute(
    """
        CREATE TABLE IF NOT EXISTS `Todo-lists` (
            `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            `telegram-id` intenger NOT NULL,
            `members-id` intenger,
            `title` varchar(255) NOT NULL,
            `tasks` text
        );
"""
)


cursor.execute(
    """
        CREATE TABLE IF NOT EXISTS `Tasks` (
            `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            `Todo-list-id` intenger NOT NULL,
            `title` varchar(255) NOT NULL,
            `description` text,
            `checked` bool NOT NULL
        );
"""
)

cursor.execute(
    """
        CREATE TABLE IF NOT EXISTS `Reports` (
            `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            `telegram-id` intenger NOT NULL,
            `text` text NOT NULL
        );
"""
)

conn.commit()

bot = telebot.TeleBot(token)

#


def cmds(dest):
    cmd = types.ReplyKeyboardMarkup()
    print(dest)
    cmd.row(
        "üìí " + translator.translate("–°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç", dest=dest).text,
        "üìù " + translator.translate("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", dest=dest).text,
    )
    cmd.row(
        "‚áÑ " + translator.translate("–°–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç", dest=dest).text,
        "‚úÖ " + translator.translate("–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–π", dest=dest).text,
    )
    cmd.row(
        "üìú " + translator.translate("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏", dest=dest).text,
        "üí∞ " + translator.translate("–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å", dest=dest).text,
    )
    cmd.row("‚öôÔ∏è " + translator.translate("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç", dest=dest).text)
    return cmd


@bot.message_handler(commands=["help", "start"])
def startMSG(msg):
    conn = sqlite3.connect("todo.db")
    cursor = conn.cursor()

    if msg.from_user.username != None:
        name = str(msg.from_user.username)
    else:
        name = str(msg.from_user.first_name) + " " + str(msg.from_user.last_name)
    cursor.execute(
        """
                select * from `Users` where `telegram-id`={0}
    """.format(
            msg.from_user.id
        )
    )
    if cursor.fetchone() == None:
        cursor.execute(
            """
                INSERT INTO `Users` (`telegram-id`,`name`) VALUES (?,?);
        """,
            (msg.from_user.id, name),
        )
        conn.commit()
        bot.send_message(
            msg.chat.id,
            translator.translate(
                """
        –ü—Ä–∏–≤–µ—Ç, –º–æ–π –¥—Ä—É–≥!\n –í–æ—Ç –≤–∞–º –Ω–µ–º–Ω–æ–≥–æ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n
        "üìí –°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç" - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n
        "‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" - —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–∫–µ –¥–µ–ª.\n
    """,
                dest=msg.from_user.language_code,
            ).text,
            parse_mode="Markdown",
            reply_markup=cmds(msg.from_user.language_code),
        )
    else:
        bot.send_message(
            msg.chat.id,
            translator.translate(
                "–•–µ–π! –ü–æ—á–µ–º—É –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç —Ç–µ–±—è?",
                dest=msg.from_user.language_code,
            ).text,
            parse_mode="Markdown",
            reply_markup=cmds(msg.from_user.language_code),
        )


def createList(msg):
    conn = sqlite3.connect("todo.db")
    cursor = conn.cursor()

    cursor.execute(
        INSERT.format(tb="`Todo-lists`", cls="`telegram-id`,`title`", vls="?,?"),
        (msg.chat.id, msg.text),
    )
    conn.commit()
    cursor.execute(
        "SELECT `id` FROM `Todo-lists` WHERE `telegram-id`=?", (msg.chat.id,),
    )

    ids = cursor.fetchall()
    ids = [str(id[0]) for id in ids]
    ids = ";".join(ids)
    cursor.execute(
        "UPDATE `Users` SET `todo-lists`=? WHERE `telegram-id`=?", (ids, msg.chat.id)
    )
    conn.commit()
    bot.send_message(
        msg.chat.id,
        translator.translate(
            "–õ–∏—Å—Ç "
            + msg.text
            + ' –±—ã–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.\n –¢–µ–ø–µ—Ä—å —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å.\n–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –ø—É–Ω–∫—Ç "–°–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç"',
            dest=msg.from_user.language_code,
        ).text,
    )


def insertReport(msg):
    conn = sqlite3.connect("todo.db")
    cursor = conn.cursor()
    id = msg.chat.id
    cursor.execute(
        "INSERT INTO `Reports` (`telegram-id`, `text`) VALUES(?,?);", (id, msg.text)
    )
    conn.commit()
    bot.send_message(
        id,
        translator.translate(
            "–í–∞—à –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", dest=msg.from_user.language_code,
        ).text,
    )


@bot.callback_query_handler(func=lambda msg: True)
def queryHandler(msg):
    conn = sqlite3.connect("todo.db")
    cursor = conn.cursor()
    id = msg.message.chat.id
    if msg.data.split("_")[0] == "checkedTask":
        bot.edit_message_reply_markup(
            id, message_id=msg.message.message_id, reply_markup=""
        )  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        task = msg.data.split("_")
        cursor.execute(
            "UPDATE `Tasks` SET `checked`=? WHERE `id`=?", (True, int(task[1])),
        )
        conn.commit()
        cursor.execute("SELECT `title` FROM `Tasks` WHERE `id`=?", (task[1],))
        bot.edit_message_text(
            chat_id=id,
            message_id=msg.message.message_id,
            text=translator.translate(
                '–ó–∞–¥–∞—á–∞ **"{}"** –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π.'.format(
                    cursor.fetchone()[0]
                ),
                dest=msg.from_user.language_code,
            ).text,
            parse_mode="Markdown",
        )
    elif msg.data.split("_")[0] == "mainMenu":
        bot.clear_step_handler_by_chat_id(id)
        bot.edit_message_text(
            chat_id=id,
            message_id=msg.message.message_id,
            text=translator.translate(
                "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", dest=msg.from_user.language_code,
            ).text,
        )

    elif msg.data.split("_")[0] == "deleteList":
        if msg.data.split("_")[1] == "STEP0":
            cursor.execute(
                "SELECT `id`,`title` FROM `Todo-lists` WHERE `telegram-id`=?", (id,)
            )
            markup = types.InlineKeyboardMarkup()
            tasks = cursor.fetchall()
            markup.row(
                types.InlineKeyboardButton(
                    translator.translate(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", dest=msg.from_user.language_code,
                    ).text,
                    callback_data="mainMenu_",
                )
            )
            for task in tasks:
                markup.row(
                    types.InlineKeyboardButton(
                        str(task[1]), callback_data="deleteList_STEP1_" + str(task[0]),
                    )
                )
            bot.edit_message_text(
                chat_id=id,
                message_id=msg.message.message_id,
                text=translator.translate(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    dest=msg.from_user.language_code,
                ).text,
            )
            bot.edit_message_reply_markup(
                id, message_id=msg.message.message_id, reply_markup=markup
            )
        elif msg.data.split("_")[1] == "STEP1":
            tid = msg.data.split("_")[2]
            cursor.execute("DELETE FROM `Todo-lists` WHERE `id`=?", (tid,))
            cursor.execute("DELETE FROM `Tasks` WHERE `Todo-list-id`=?", (tid,))
            conn.commit()
            bot.edit_message_reply_markup(
                id, message_id=msg.message.message_id, reply_markup=""
            )
            bot.edit_message_text(
                chat_id=id,
                message_id=msg.message.message_id,
                text=translator.translate(
                    "Todo-list –±—ã–ª —É–¥–∞–ª–µ–Ω–Ω —É–¥–∞—á–Ω–æ.", dest=msg.from_user.language_code,
                ).text,
            )
    elif msg.data.split("_")[0] == "deleteTask":
        if msg.data.split("_")[1] == "STEP0":
            cursor.execute(
                "SELECT `thisPrjct` FROM `Users` WHERE `telegram-id`=?", (id,)
            )
            cursor.execute(
                "SELECT `id`,`title`, `checked` FROM `Tasks` WHERE `Todo-list-id`=?",
                cursor.fetchone(),
            )
            markup = types.InlineKeyboardMarkup()
            tasks = cursor.fetchall()
            markup.row(
                types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="mainMenu_")
            )
            for task in tasks:
                if task[2]:
                    markup.row(
                        types.InlineKeyboardButton(
                            "‚úÖ" + str(task[1]),
                            callback_data="deleteTask_STEP1_" + str(task[0]),
                        )
                    )
                else:
                    markup.row(
                        types.InlineKeyboardButton(
                            "‚ùå" + str(task[1]),
                            callback_data="deleteTask_STEP1_" + str(task[0]),
                        )
                    )
            bot.edit_message_text(
                chat_id=id,
                message_id=msg.message.message_id,
                text=translator.translate(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    dest=msg.from_user.language_code,
                ).text,
            )
            bot.edit_message_reply_markup(
                id, message_id=msg.message.message_id, reply_markup=markup
            )
        elif msg.data.split("_")[1] == "STEP1":
            tid = msg.data.split("_")[2]
            cursor.execute("DELETE FROM `Tasks` WHERE `id`=?", (tid,))
            conn.commit()
            bot.edit_message_reply_markup(
                id, message_id=msg.message.message_id, reply_markup=""
            )
            bot.edit_message_text(
                chat_id=id,
                message_id=msg.message.message_id,
                text=translator.translate(
                    "–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–Ω–∞ —É–¥–∞—á–Ω–æ.", dest=msg.from_user.language_code,
                ).text,
            )
    elif msg.data.split("_")[0] == "report":
        bot.edit_message_reply_markup(
            id, message_id=msg.message.message_id, reply_markup=""
        )
        bot.send_message(
            id,
            translator.translate(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö.ü¶†",
                dest=msg.from_user.language_code,
            ).text,
        )
        bot.register_next_step_handler_by_chat_id(id, insertReport)


def createTask(msg, prjct):
    conn = sqlite3.connect("todo.db")
    cursor = conn.cursor()
    if msg.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(msg.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!")
        return
    cursor.execute(
        "INSERT INTO `Tasks` (`Todo-list-id`, `title`, `checked`) VALUES (?,?,?)",
        (prjct, msg.text, False),
    )
    conn.commit()
    cursor.execute("SELECT `id` FROM `Tasks` WHERE `Todo-list-id`=?", (prjct,))
    ids = cursor.fetchall()
    ids = [str(id[0]) for id in ids]
    ids = ";".join(ids)
    cursor.execute("UPDATE `Todo-lists` SET `tasks`=? WHERE `id`=?", (ids, prjct))
    conn.commit()
    bot.send_message(
        msg.chat.id,
        translator.translate(
            '–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–¥–∞—á—É **"{}"**.'.format(msg.text),
            dest=msg.from_user.language_code,
        ).text,
        parse_mode="Markdown",
    )


def changeList(msg):
    conn = sqlite3.connect("todo.db")
    cursor = conn.cursor()
    if msg.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(msg.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!")
        return
    cursor.execute(
        "UPDATE `Users` SET `thisPrjct`=? WHERE `telegram-id`=?",
        (msg.text.split(" ")[0], msg.chat.id),
    )
    conn.commit()
    bot.send_message(
        msg.chat.id,
        translator.translate(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç " + msg.text + ".",
            dest=msg.from_user.language_code,
        ).text,
        reply_markup=cmds(msg.from_user.language_code),
    )


@bot.message_handler(content_types=["text"])
def text(msg):
    conn = sqlite3.connect("todo.db")
    cursor = conn.cursor()

    cmd = msg.text

    if (
        cmd
        == "üìí "
        + translator.translate("–°–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç", dest=msg.from_user.language_code,).text
    ):
        bot.send_message(
            msg.chat.id,
            translator.translate(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞.",
                dest=msg.from_user.language_code,
            ).text,
        )
        bot.register_next_step_handler_by_chat_id(
            msg.chat.id, lambda msg: createList(msg)
        )
    elif (
        cmd
        == "‚áÑ "
        + translator.translate(
            "–°–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç", dest=msg.from_user.language_code,
        ).text
    ):
        try:
            prjcts = telebot.types.ReplyKeyboardMarkup()
            cursor.execute(
                "SELECT `todo-lists` FROM `Users` WHERE `telegram-id`=?", (msg.chat.id,)
            )
            projects = cursor.fetchone()[0].split(";")
            allprjcts = []

            for project in projects:
                cursor.execute(
                    "SELECT `title` FROM `Todo-lists` WHERE `id`=?", (project,)
                )
                allprjcts.append([project, cursor.fetchone()[0]])

            tmp = []
            i = 0
            prjcts.row("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            for prjct in allprjcts:

                if i != 3:
                    tmp.append(" ".join(prjct))
                    i += 1
                else:
                    tmp.append(" ".join(prjct))
                    prjcts.row(*tmp)
                    tmp = []
                    i = 0
            else:
                prjcts.row(*tmp)

            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton(
                    translator.translate(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", dest=msg.from_user.language_code,
                    ).text,
                    callback_data="mainMenu_",
                )
            )
            bot.send_message(
                msg.chat.id,
                translator.translate(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç.", dest=msg.from_user.language_code,
                ).text,
                reply_markup=prjcts,
            )
            bot.register_next_step_handler_by_chat_id(
                msg.chat.id, lambda msg: changeList(msg)
            )
        except:
            bot.send_message(
                msg.chat.id,
                translator.translate(
                    "–£ –≤–∞—Å –Ω–µ—Ç Todo-list.", dest=msg.from_user.language_code,
                ).text,
            )
    elif (
        cmd
        == "üìù "
        + translator.translate("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", dest=msg.from_user.language_code,).text
    ):
        try:
            cursor.execute(
                "SELECT `thisPrjct` FROM `Users` WHERE `telegram-id`=?", (msg.chat.id,)
            )
            prjct = cursor.fetchone()
            cursor.execute("SELECT `title` FROM `Todo-lists` WHERE `id`=?", prjct)

            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton(
                    translator.translate(
                        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", dest=msg.from_user.language_code,
                    ).text,
                    callback_data="mainMenu_",
                )
            )

            bot.send_message(
                msg.chat.id,
                translator.translate(
                    '–ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ "{pj}"'.format(
                        pj=cursor.fetchone()[0]
                    ),
                    dest=msg.from_user.language_code,
                ).text,
                reply_markup=markup,
            )
            bot.register_next_step_handler_by_chat_id(
                msg.chat.id, lambda msg: createTask(msg, prjct[0])
            )
        except:
            bot.send_message(
                msg.chat.id,
                translator.translate(
                    "–õ–∏–±–æ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∑–∞–¥–∞—á, –ª–∏–±–æ –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
                    dest=msg.from_user.language_code,
                ).text,
            )
    elif (
        cmd
        == "‚úÖ "
        + translator.translate(
            "–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", dest=msg.from_user.language_code,
        ).text
    ):
        try:
            cursor.execute(
                "SELECT `thisPrjct` FROM `Users` WHERE `telegram-id`=?", (msg.chat.id,)
            )
            cursor.execute(
                "SELECT `id`, `title`, `checked` FROM `Tasks` WHERE `Todo-list-id` = ?",
                cursor.fetchone(),
            )
            markup = types.InlineKeyboardMarkup()
            tasks = cursor.fetchall()

            tmp = []
            i = 0
            for task in tasks:
                if task[2] == False:
                    markup.row(
                        types.InlineKeyboardButton(
                            text="‚ùå" + task[1],
                            callback_data="checkedTask_" + str(task[0]),
                        )
                    )
                else:
                    markup.row
                    (types.InlineKeyboardButton(text="‚úÖ" + task[1]))
            bot.send_message(
                msg.chat.id,
                translator.translate(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É.", dest=msg.from_user.language_code,
                ).text,
                reply_markup=markup,
            )
        except:
            bot.send_message(
                msg.chat.id,
                translator.translate(
                    "–õ–∏–±–æ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∑–∞–¥–∞—á, –ª–∏–±–æ –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
                    dest=msg.from_user.language_code,
                ).text,
            )

    elif (
        cmd
        == "üìú "
        + translator.translate(
            "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏", dest=msg.from_user.language_code,
        ).text
    ):
        try:
            cursor.execute(
                "SELECT `thisPrjct` FROM `Users` WHERE `telegram-id`=?", (msg.chat.id,)
            )
            cursor.execute(
                "SELECT `title`, `checked` FROM `Tasks` WHERE `Todo-list-id`=?",
                cursor.fetchone(),
            )
            text = ""
            tasks = cursor.fetchall()
            t = 0
            f = 0
            for task in tasks:
                if task[1]:
                    t += 1
                    text += "‚úÖ " + str(task[0]) + "\r\n"
                else:
                    f += 1
                    text += "‚ùå " + str(task[0]) + "\r\n"
            if t > f and f == 0:
                text = translator.translate(
                    "üéâ–•–µ–π!üéâ\n\r–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ!\n"
                    + text,
                    dest=msg.from_user.language_code,
                ).text
            bot.send_message(msg.chat.id, text)
        except:
            bot.send_message(
                msg.chat.id,
                translator.translate(
                    "–õ–∏–±–æ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∑–∞–¥–∞—á, –ª–∏–±–æ –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
                    dest=msg.from_user.language_code,
                ).text,
            )

    elif (
        cmd
        == "üí∞ "
        + translator.translate("–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å", dest=msg.from_user.language_code,).text
    ):
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                text=translator.translate(
                    "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", dest=msg.from_user.language_code,
                ).text,
                url="https://www.donationalerts.com/r/redfoxbotmaker",
            )
        )
        bot.send_message(
            msg.chat.id,
            translator.translate("–í–æ—Ç —Å—Å—ã–ª–∫–∞", dest=msg.from_user.language_code,).text,
            reply_markup=markup,
        )
    elif (
        cmd
        == "‚öôÔ∏è "
        + translator.translate(
            "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç", dest=msg.from_user.language_code,
        ).text
    ):

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(
                translator.translate(
                    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", dest=msg.from_user.language_code,
                ).text,
                callback_data="mainMenu_",
            )
        )
        markup.row(
            types.InlineKeyboardButton(
                translator.translate(
                    "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", dest=msg.from_user.language_code,
                ).text,
                callback_data="deleteTask_STEP0",
            )
        )

        markup.row(
            types.InlineKeyboardButton(
                translator.translate(
                    "–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", dest=msg.from_user.language_code,
                ).text,
                callback_data="deleteList_STEP0",
            )
        )
        markup.row(
            types.InlineKeyboardButton(
                translator.translate(
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", dest=msg.from_user.language_code,
                ).text,
                callback_data="report_",
            )
        )
        bot.send_message(
            msg.chat.id,
            translator.translate(
                "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", dest=msg.from_user.language_code,
            ).text,
            reply_markup=markup,
        )
    else:
        bot.send_message(
            msg.chat.id,
            translator.translate(
                "üì£–•–µ–π!üì£\n–ë—Ä–∞—Ç, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏ /help",
                dest=msg.from_user.language_code,
            ).text,
        )


print(LINE)
print("Bot have been started!")
print(LINE)

bot.polling()
